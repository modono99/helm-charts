NAME: pagesapp
LAST DEPLOYED: Thu Jan 13 15:21:04 2022
NAMESPACE: fornax
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
global:
  mysql_svc_name: pages-mysql
mysql:
  config:
    spring_datasource_username: root
  deployment:
    containerPort: 3306
  env:
    MYSQL_DATABASE: pages
    MYSQL_SERVICE_HOST: mysql
    MYSQL_SERVICE_PORT: 3306
  global:
    mysql_svc_name: pages-mysql
  image:
    repository: mysql
    tag: "8.0"
  imagePullPolicy: IfNotPresent
  job:
    env:
      FLYWAY_PLACEHOLDER_REPLACEMENT: true
      FLYWAY_URL: jdbc:mysql://pages-mysql/pages
      FLYWAY_USER: root
    image:
      repository: flyway/flyway
      tag: 6.4.4
  pv:
    accessMode: ReadWriteMany
    capacity:
      storage: 3Gi
    hostPath:
      path: /var/lib/mysql/fornax
  pvc:
    resources:
      requests:
        storage: 1Gi
  secrets:
    SDP: cGFzc3dvcmQ=
  service:
    port: 3306
    protocol: TCP
    targetPort: 3306
    type: ClusterIP
  storageClass:
    provisioner: k8s.io/minikube-hostpath
    reclaimPolicy: Delete
    volumeBindingMode: Immediate
  volumeMounts:
    mountPath: /var/lib/mysql
pages-api:
  config:
    PAGE_CONTENT: Green-Pages coming from Yellow-World!
  dbname: pages
  deployment:
    containerPort: 8080
    replicaCount: 1
  env:
    DEBUG: true
    LOGGING_FILE_NAME: fornax/logs/app.log
    LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: debug
    LOGGING_LEVEL_ROOT: debug
    MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: '*'
    SPRING_DATASOURCE_URL: jdbc:mysql://pages-mysql/pages?useSSL=false
    SPRING_DATASOURCE_USERNAME: root
  global:
    mysql_svc_name: pages-mysql
  image:
    repository: dellcloud/pages
    tag: monitor
  imagePullPolicy: IfNotPresent
  livenessProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 15
    periodSeconds: 30
  readinessProbe:
    initialDelaySeconds: 15
    periodSeconds: 30
    tcpSocket:
      port: 8080
  secrets:
    SDP: cGFzc3dvcmQ=
  service:
    port: 8080
    protocol: TCP
    targetPort: 8080
    type: NodePort
  volumeMounts:
    mount_path: /fornax

HOOKS:
---
# Source: pages/charts/mysql/templates/flyway-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: pagesapp-mysql
  labels:
    app: pagesapp-mysql
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 16
  template:
    spec:
      containers:
        - name: mysql
          image: flyway/flyway:6.4.4
          imagePullPolicy: IfNotPresent
          args:
            - info
            - migrate
            - info
          env:
            - name: FLYWAY_URL
              value: "jdbc:mysql://pages-mysql/pages"
            - name: FLYWAY_USER
              value: root
            - name: FLYWAY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pagesapp-mysql
                  key: password
            - name: FLYWAY_PLACEHOLDER_REPLACEMENT
              value: "true"
            - name: FLYWAY_PLACEHOLDERS_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: pagesapp-mysql
                  key: spring.datasource.username
            - name: FLYWAY_PLACEHOLDERS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pagesapp-mysql
                  key: password
          volumeMounts:
            - mountPath: /flyway/sql
              name: sql
      volumes:
        - name: sql
          configMap:
            name: pagesapp-mysql
      restartPolicy: Never
MANIFEST:
---
# Source: pages/charts/mysql/templates/secret.yaml
apiVersion: v1
data:
  password: cGFzc3dvcmQ=
kind: Secret
metadata:
  name: pagesapp-mysql
---
# Source: pages/charts/pages-api/templates/secret.yaml
apiVersion: v1
data:
  password: cGFzc3dvcmQ=
kind: Secret
metadata:
  name: pagesapp-pages-api
---
# Source: pages/charts/mysql/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pagesapp-mysql
data:
  spring.datasource.username: root
  V1__inital_schema.sql: |
    USE pages;
    create table pages(
    id bigint(20) not null auto_increment,
    business_name VARCHAR(50),
    address VARCHAR(50),
    category_id bigint(20),
    contact_number VARCHAR(50),
    primary key (id)
    )
    engine = innodb
    default charset = utf8;
---
# Source: pages/charts/pages-api/templates/config.yaml
apiVersion: v1
data:
  PAGE_CONTENT: Green-Pages coming from Yellow-World!
kind: ConfigMap
metadata:
  name: pages-api
---
# Source: pages/charts/mysql/templates/storage-class.yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: pagesapp-mysql-fornax
  labels:
    addonmanager.kubernetes.io/mode: EnsureExists
provisioner: k8s.io/minikube-hostpath
reclaimPolicy: Delete
volumeBindingMode: Immediate
---
# Source: pages/charts/mysql/templates/pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pagesapp-mysql-fornax
  labels:
    type: local
spec:
  storageClassName: pagesapp-mysql-fornax
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /var/lib/mysql/fornax
---
# Source: pages/charts/mysql/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pagesapp-mysql
spec:
  storageClassName: pagesapp-mysql-fornax
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
# Source: pages/charts/mysql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pages-mysql
  labels:
    app: pagesapp-mysql
spec:
  ports:
    - port: 3306
  selector:
    app: pagesapp-mysql
  type: ClusterIP
---
# Source: pages/charts/pages-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pagesapp-pages-api
    access: external
  name: pagesapp-pages-api
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: pagesapp-pages-api
  type: NodePort
---
# Source: pages/charts/mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pagesapp-mysql
  labels:
    app: pagesapp-mysql
spec:
  selector:
    matchLabels:
      app: pagesapp-mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: pagesapp-mysql
    spec:
      containers:
        - image: mysql:8.0
          name: mysql
          imagePullPolicy: IfNotPresent
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pagesapp-mysql
                  key: password
            - name: MYSQL_SERVICE_HOST
              value: "mysql"
            - name: MYSQL_SERVICE_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "pages"
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: pagesapp-mysql
---
# Source: pages/charts/pages-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: pagesapp-pages-api
  name: pagesapp-pages-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pagesapp-pages-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: pagesapp-pages-api
    spec:
      containers:
        - image: dellcloud/pages:monitor
          name: pages-api
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: PAGE_CONTENT
              valueFrom:
                configMapKeyRef:
                  name: pages-api
                  key: PAGE_CONTENT
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:mysql://pages-mysql/pages"
            - name: SPRING_DATASOURCE_USERNAME
              value: "root"
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pagesapp-pages-api
                  key: password
            - name: DEBUG
              value: "true"
            - name: LOGGING_FILE_NAME
              value: "fornax/logs/app.log"
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB
              value: debug
            - name: LOGGING_LEVEL_ROOT
              value: debug
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "*"
          volumeMounts:
            - name: node-dir
              mountPath: /fornax
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 30
      volumes:
        - name: node-dir
          hostPath:
            path: /fornax

NOTES:
Thank you for installing pages.

Your release is named pagesapp.

To learn more about the release, try:

helm status pagesapp
helm get all pagesapp

To access the application, try:

SVC=$(kubectl get svc -l access=external --namespace fornax -l access=external | awk 'NR==2{print $1}')

kubectl --namespace fornax port-forward svc/$SVC 8080:8080
